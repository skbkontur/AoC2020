using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;

namespace AoC_2020
{
    [TestFixture]
    public class Task18_2
    {
        [Test]
        [TestCaseSource(nameof(TestCases))]
        public long Task(string input)
        {
            var lines = input.Split("\r\n", StringSplitOptions.RemoveEmptyEntries);

            var acc = 0L;

            foreach (var line in lines)
            {
                var morphemes = line
                    .Replace("(", " ( ")
                    .Replace(")", " ) ")
                    .Split(" ", StringSplitOptions.RemoveEmptyEntries);

                morphemes = AddParenthesesToPlus(morphemes);

                acc += Solve(morphemes);
            }

            return acc;
        }

        private string[] AddParenthesesToPlus(string[] morphemes)
        {
            var plusCount = morphemes.Count(x => x == "+");
            var result = morphemes.ToList();

            for (var plusNumber = 0; plusNumber < plusCount; ++plusNumber)
            {
                var currentPlusIndex = result.Select((x, i) => (Str: x, Index: i)).Where(x => x.Str == "+").Skip(plusNumber).First().Index;

                var indexForLeftParentheses = GetLeftIndexForParentheses(result, currentPlusIndex);
                var indexForRightParentheses = GetRightIndexForParentheses(result, currentPlusIndex);

                result.Insert(indexForRightParentheses + 1, ")");
                result.Insert(indexForLeftParentheses, "(");
            }

            return result.ToArray();
        }
        
        private static int GetLeftIndexForParentheses(List<string> morphemes, int baseIndex)
        {
            var level = 0;
            for (var i = baseIndex - 1; i > 0; --i)
            {
                var str = morphemes[i];
                if (int.TryParse(str, out _) && level == 0
                    || str == "(" && (level == -1 || level == 0)) return i;
                if (str == "(") ++level;
                if (str == ")") --level;
            }

            return 0;
        }

        private static int GetRightIndexForParentheses(List<string> morphemes, int baseIndex)
        {
            var level = 0;
            for (var i = baseIndex + 1; i < morphemes.Count; ++i)
            {
                var str = morphemes[i];
                if (int.TryParse(str, out _) && level == 0
                    || str == ")" && (level == 1 || level == 0)) return i;
                if (str == "(") ++level;
                if (str == ")") --level;
            }

            return morphemes.Count - 1;
        }

        private long Solve(string[] morphemes)
        {
            var result = 0L;
            (long? Left, long? Right, Func<long, long, long> Op) expression = default;

            for (var i = 0; i < morphemes.Length; i++)
            {
                var morpheme = morphemes[i];
                if (long.TryParse(morpheme, out var number))
                {
                    SetExpressionArgument(ref expression, number);
                }
                else
                {
                    switch (morpheme)
                    {
                        case "+":
                            expression.Op = (x, y) => x + y;
                            break;
                        case "*":
                            expression.Op = (x, y) => x * y;
                            break;
                        case "(":
                            var parenthesesExpression = TakeWhileZeroLevelParentheses(morphemes.Skip(i + 1))
                                .ToArray();
                            var arg = Solve(parenthesesExpression);
                            SetExpressionArgument(ref expression, arg);
                            i += parenthesesExpression.Length + 1;
                            break;
                    }
                }

                if (!expression.Left.HasValue || !expression.Right.HasValue) continue;

                result = expression.Op(expression.Left.Value, expression.Right.Value);
                expression = default;
                expression.Left = result;
            }

            return expression.Left.Value;
        }

        private static IEnumerable<string> TakeWhileZeroLevelParentheses(IEnumerable<string> expression)
        {
            var level = 0;
            foreach (var str in expression)
            {
                if (str == ")" && level == 0) yield break;
                if (str == "(") ++level;
                if (str == ")") --level;
                yield return str;
            }
        }

        private static void SetExpressionArgument(ref (long? Left, long? Right, Func<long, long, long> Op) expression,
            long number)
        {
            if (!expression.Left.HasValue)
            {
                expression.Left = number;
            }
            else if (!expression.Right.HasValue)
            {
                expression.Right = number;
            }
        }

        private static IEnumerable<TestCaseData> TestCases()
        {
            yield return new TestCaseData(@"1 + 2 * 3 + 4 * 5 + 6").Returns(231);
            yield return new TestCaseData(@"1 + (2 * 3) + (4 * (5 + 6))").Returns(51);
            yield return new TestCaseData(@"2 * 3 + (4 * 5)").Returns(46);
            yield return new TestCaseData(@"5 + (8 * 3 + 9 + 3 * 4 * 3)").Returns(1445);
            yield return new TestCaseData(@"5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))").Returns(669060);
            yield return new TestCaseData(@"((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2").Returns(23340);
            yield return new TestCaseData(@"4 + 2 * 8 + 6 * 9
(7 + 2) + 2 + 8 + 9 * 9 + (8 + (7 * 8 * 9 * 6) * 8 + 9)
5 * (6 * 4 * 7 + 2 + 3) + 3 + 8
7 * 4 * (8 * (9 * 4 * 4 * 6))
2 + (5 + 6 * 3 * 5 + (2 + 3))
5 + (7 + 4 * 3 + 7 * (4 * 8 + 9 + 9 + 9 * 9) * 2)
9 + (3 * (3 + 7) + 2 + 4) * 6
3 * 8 * 2 + 6 + (2 + (8 * 7) + 5 * 8)
2 + 8 + (8 + 6 * 7 * 3 + 8 + 6)
((5 + 5 * 9) * (3 * 8 + 2 * 4 + 4 + 3) + 5 * (7 * 3 * 9)) + 3 + 2 * 9
2 * ((7 * 8 * 9 + 8 + 2 * 4) * 4 + 7 * 8) * 7 * 4
(9 + 6 + (5 + 9 + 3)) + 8
6 + 4 + (7 + 7 + 3 + 8) * 6
7 + 3 * (9 * (4 + 9 + 6 + 2) + (5 + 9 * 8 + 6 * 5) * 6 * 8 * (3 + 9 * 8 + 8 + 5)) * 3 + 4 * 6
7 + (3 * 4 + 6 + 9 * 8)
(9 + 9 + 6 + 6) + 3 * (5 * (2 + 5 * 6 + 6 * 6)) + (3 + (2 + 3) * 4 + 3 + 9 * (6 * 5 * 7)) * 8
2 + (5 * 8 + 9 + 3) * 7 * 6
8 * 9 + (2 * 9 * 9) * 5 * 9
7 * (6 * 4) + (5 + 3 * 6 * 3 + 7 * 2)
2 + 4
3 * (9 * 7) + 4 + 6 * 4
(7 + 7 + (9 * 7 * 9 + 5 + 4) * 8 + 2) + 5 * (7 * 5 + 3 * 3 * 6) + 4 + 8 + 4
6 + 7 + ((7 + 9 * 3 * 6 + 8) + 5 * 9 * 6)
(4 * (4 * 7 + 4 * 3) * 3) + 4 + 8
6 * (2 * 2 + 8) * ((9 + 3 + 9 * 7 + 4) * (4 * 9 * 6 * 9) * (7 + 9 + 6) * 4 * (2 + 6 * 6 * 8 * 5 * 7)) + 4 + 6 + 3
(3 + 6 * 8 * 8 * 4) + (3 + 6) * 5 * ((4 + 6 + 4 * 6 + 6) * 3 * 8 * 5 + (8 * 3)) * ((5 + 2) + 4 + 2 * 9)
7 + (7 + 8 * 3 * (4 + 2 * 5)) + 7 + 9 * 6
8 * (4 * 3 + 8) * (5 + 6 + 9) + 5 * 4 * 7
9 + 2 + (2 + 8 * 6 * 7 * 6 * (7 * 6 + 4 * 6 * 6 * 5)) * ((9 + 4 * 5 + 9) + 7 + 5) + 3 * 2
((9 * 4) * (7 + 6 * 3) * 3 * 8 * 4 * 7) * (4 + (8 + 9 + 3 * 5) + 5 * 2 + 6 * 8) + 6 * 4 + (2 * (3 * 8 * 4 + 3 + 7 + 7) * 9 + 9 + 3)
7 * 8 * ((8 + 6) + 7 * (6 * 2 + 9)) + 5
3 + 6 + (8 * 2 + 4) + 2
3 * ((8 + 6 + 4 + 7 * 7 + 8) + 9 * (8 * 5 + 9) * 2 + 9 + 8) + 9 * 7 * 4
7 + 4 * 2 * (6 + 7 * (9 + 8 * 6 * 3) + 3 * (5 * 4 + 7 + 9 + 3 + 8)) + 4 + 5
9 * 2 + 2 + 8 + 6 * (7 + 5 * 5 * 8)
((8 + 9 * 6 * 5 + 2) + 4 * 6 + 4) + 8 * (9 + 9 * 9 * 5) + 3
((4 * 9 + 4 * 3) + 9 + 7 * 8) * 6
8 + 6 + 7 + (2 + 7 * (3 * 2 * 7 * 5)) + 3 * 9
(9 * (8 * 6) + 4 + 3 * (3 * 4 + 8)) + (5 + 3 * 7 * 3 + 7) + (8 + 8 * 9 + 7 * (4 + 6 + 6 + 6 + 5) + 2) + 6 + 9
7 + 9 + 7 * (7 * 2 * (8 * 4 + 6 * 4 + 2 + 8)) + ((6 + 7 * 5 * 4) + 6 * 7 * 9 * 5) * 8
(2 * 6 * 2 * 3 + 3 + 3) + 9 * 5 * 7 * 2 * 9
(5 + 2) + (8 * 8 * (2 * 5 * 3 * 8 + 8) + (8 * 8) + 2) + 2 * 7
8 + (5 * 7 * 9 * 5 * 9) + 5 + (6 * 9) + (3 + 3 * 3 + 7) * 7
((5 + 2 * 7 + 9) * 7 * 2) + (5 * 3) * 8 * 3 + 2
6 + (8 + 7 * 8 * 3 + 4 + 3) + 9 * 5 * 6
6 + 8 + (9 * 7 * (3 + 6 * 7 + 8 * 8 * 5) + 5)
5 + 6 + 6 + (6 + 9 * 8) + 6
2 * 9 * (6 + 8 + (5 + 2) * 3) * 7
3 + (2 + 8)
4 * 8 * 9 * ((6 * 8) + 2 + 9 + 9 * 6) * 6 + 3
9 * 9 + (6 * 4 * 2 + (4 + 2) * 5 * 3)
(7 + 7 + 9) * (5 + 6 + 8) * 5
4 + ((7 + 3 + 4) * 6 * (3 + 8) + 4) + 9 + 8
9 * 8 + 5 * (5 * 6 * 3 + 2 * 3) * 9 * 4
((9 * 2 * 3 * 3 * 5 + 9) + 8 + 9 * 2) * 8 * 7
8 * (9 + 2 + 8 * 7 + 8 * (2 + 6 + 5)) + 7 + 3 + 5 * 9
(4 + 8 * 9 * (5 + 9) + 9) + 7 + 2 * 4 * 6 * 5
2 + ((5 + 3 + 8 * 8 * 3 + 5) * 3 + (3 + 8 * 9 + 3 + 7 + 4) * (5 * 9) + 4 * 6)
(7 + 8 * 4) + 2 + (8 + 6 * 3 * 2)
3 * (6 * (5 * 8 * 4) * 8 * 8) + 2 + 9
9 * ((2 * 6) * 9 + 5 + (5 + 7 * 6 + 4 + 8 * 8) + (6 * 7 + 9 + 8 + 8 * 5) * 6) * 4
3 * 3 + (8 + 9 * 7 + 8 * 3) * 7 + 3 * 2
(5 + (3 * 4)) + 3
(2 + 3 * 2) * (4 * 3) * 7 + (6 + 6 * 9) + 5
7 * 4 * (6 + (5 * 7 + 5) * 5) * 6 + 4
7 + (9 + 9) * 3 * 4
5 + 2 * (2 + 2 * 3 + 2 + (9 * 7 * 4 * 2) * 3) + 7 * 3
2 * (9 + 8 * 8 * 5) * 9 + 3 + 5 + 3
7 + 7 + (8 + 5) + 2 + 2 * (7 + 8 + 7 * 9)
2 + 7 * (5 + 5 + (6 * 8 * 8) + 4)
7 + 6 + 4 * (8 * 8 + (7 * 8 + 5 * 3 * 9 + 7) * 8) + 7
9 * (9 + (3 * 2))
5 + (3 + (7 * 7 * 5 * 9 + 2 * 4) * 2) + 3
7 * 5 + (5 * 7) + 5 + 8 + 6
3 + 2 + (3 + 4 * 2 * (9 * 9 + 5 + 8 + 4 + 7) * 3 + 3) * 6
(3 * 7 + 9) + 7 * (7 * (2 + 6 + 6 * 5) + 8 + (6 * 8) * (3 * 8 + 8 * 8 * 4 + 9)) * ((3 * 3 * 2 + 8 + 5) + (9 + 8 * 9 + 4 * 5 * 3)) + ((9 + 9 + 6) * 9 * 9) + 9
2 + 8 + (4 + 8 * 6) + 6 + (6 + 6 * 3) + 6
((7 * 9 + 8 + 3) * 3 * 5 * (7 + 9 * 6 * 8 + 3 * 2)) + 4 * (5 + 5 + 4 * 7 * 5 * 2)
9 + 9 * 3 + 8 * 4
5 + 7 + 7 * 5
8 + (2 + 8 * 9 + 5 * 4 + 9) * 8 * 7 + 7 * 5
7 * (3 * (3 * 3)) + (7 * (4 + 2 + 8 + 3 * 2 + 3)) * 2 * 5 + 3
2 + ((8 * 7 * 9 + 8 + 6) * 4 + 6 * 3 * 6) * 4 * 7 * (4 + 6 + 6 * 2 * 7 * 6) + 8
4 * 8 * 8 + (3 * 3 * (4 + 5 * 4 + 4 + 4 + 7)) + 4
9 + ((3 + 8) + 4) + 4
(2 * 2 * 6 * 2) * 4 + 2 * 7 + 6
8 * (3 + 9 + 2) + 9 * (7 + 9 + 7) * (2 * 4 * (2 + 7) + 6 * (5 + 9 + 6 + 8 * 8) * 7) * (7 + (3 * 5 + 4 + 5) * 3 * 3 * 8 + 4)
5 * 8 * ((9 + 8 * 5) * 3 + 7 * 9 * 6) * 4
(4 * (3 * 6 * 7) * 4 * 4 + 5 * 3) * ((4 + 7 + 9) + 4) * 5
3 * 5 + (2 * 6 * (5 + 6 + 4) * (5 + 5 * 5 * 5) * 5 * 8) + 5 * 6 + 8
(2 + (6 * 2 * 5 + 8 * 4 + 4) + 4 + (4 * 3) + 6 + 7) + 2 * 9 + 9 + 9 * ((8 * 6) + (6 * 2) * (6 + 8 + 4 * 2 * 7 * 6) * (5 + 7 * 9) + 6)
6 * (3 + (2 * 7)) + 6 * (4 * 5)
5 + 7 * 4
4 * (3 + 8 * 9 + 5) + 6 * (9 + (4 * 6 + 4) * (4 + 2 + 7 * 4 * 3 + 2) + 4 * 3) + (2 * 7) + 5
(5 * 2 * 2 * (2 + 8 + 5 * 6) + (3 * 9 + 7 + 2 * 6 + 7) + 6) + (5 * 5 * 5 * 8) + 2 * 5 * 4
(3 + 8 * (6 * 4 * 6 + 9) + 3) * 3
((7 * 5 + 2 + 6 + 8) * (7 + 2 + 3) * 5 + 7) * 7 * 6 * (7 + (4 * 6 * 8 * 7 + 2 + 2) + 6 + 8 * 9 + 4)
2 + 7 * 7 + (6 + (9 + 8) + 6 * 2 * 7) + ((3 * 6 * 8 * 3) * 6 + 2 * 8 * (2 * 2))
4 + 6 * 9 + 7 * (8 + 6 * 3 + (5 * 8 + 2 * 8 + 6 + 9) * 4 * 5) + (5 + 9)
7 * 6 + (8 + 5 * 3 * (9 * 2 + 5 + 6) + 7 + 9) + 9
(8 + 7 + 8 * 4 * 6) + 5 * (9 * 4 * 9)
8 + (5 * 8) * (9 + 6 * 4 * 8 * 6 + 3) * 6 + 3 + 3
((7 + 9 * 7 + 2 + 3) * 6 * 3) * (9 * 7 * 7 + 6) + 2 * 9 * 9 + 2
3 + 5 * (2 + 8 * 2 * 7) + 6 + (7 + (7 + 5 * 8 * 6 * 4) + 5 * 3 * (4 * 2 + 2 + 6 * 3 + 6)) + 7
4 + 7 * 9 + 6 * 7 * (6 + 5 + 9 + (7 + 9 + 2 + 3 * 7) + 6)
7 + ((8 * 6 + 7 * 4 * 4 * 4) + 3 + 5) + 5 + 7 + 2 + 2
9 + (2 * (4 + 2) + 7)
(3 * 2 * 6 * 3 * 5) + 5 + (6 * 7 * 5) * 6
(4 + 3 * 5) * 7 * 8 + 9
(9 + 7 + 9 + 6 * 8) * 8 * (9 + 7 * 6 + 6)
8 + (7 + (8 + 4 + 6) * 5 + 7) * 5 + ((9 * 5 + 8 * 4 * 7 + 2) * (4 * 2 + 7))
3 + 8 * (7 * (4 * 7 * 3 * 8 + 3) + 7 + 3 * 8 * 3) * 6 + 5 + 9
5 + (2 + 2 + 8 + (3 + 5 * 3 * 6 + 6 + 2) * 8) + 9 + 3
9 * 8 * (7 + 8 + 8)
(3 * 3 * 2 * 4 + 2) + 4 + 8 + 6 * 7
(5 + (9 * 5 + 9)) * 2
4 * ((4 * 7 * 3 * 9 + 9 * 9) * (8 + 6 + 2 * 9 * 2 * 4) + (3 * 4) + 2 * (6 * 2 + 9 * 3) + 9)
3 * 2 * (4 + 5 + (2 + 5 * 2 * 6 + 8) + 5 + 2 * (8 + 5)) * 7 * 6 * 6
(5 + 8 * 5) + 4 * 4 * (6 + 7 * 5 * (9 * 6 + 5) + 5)
8 * 7 * 3 * (7 * 6 * 5 + 2 + 8) + 5
7 * (4 * 4 + 2 + (2 * 9) * 6 + 8) + 5 + (3 * 5) + 9 * 8
2 * 3 * 8 + ((8 * 3 + 9) + 9 * 6 + (6 * 5 * 9 * 2) + 4 * 2)
6 + 7 + (6 * 3 * 5 + 3 + 5 * 8) + 8 * 2
((8 + 2 + 4 + 3 + 5 * 2) + 5 + 5 + 4 + (5 + 8 + 2 + 6 * 6 * 5)) * 4 + ((8 * 7 + 5) + (5 + 4) + 7 + 9) + 7
(7 + 2 + 7 * (3 + 6 + 6 + 7 + 3 * 3) + 6) * 8 + 7 + 2 + 4
6 + 8 * 9 * 8 * (8 + 4 * 3 * (5 * 6 * 4 * 2 * 8)) * 8
(2 * (3 + 7 * 6 * 7)) * (2 + 7 + 3 + 9 + 9 + (6 + 4 + 3 * 5 * 5 * 4)) + 2
9 * ((4 * 9 * 7 * 4) + 9 + 5 * 3) + 9 + 7
((2 + 4 + 6 * 8) + 8 * 7 + 7) * 8 * 3 * 2
(4 * 5) * 8
(3 + (8 * 4 * 8)) * 7 + 4 * (4 * 4 * 6 + 7 * (5 * 3 + 4 * 4 + 4 * 4) * 9)
2 + 9 + 3 + 3 * 6 + 6
8 * 9 * ((8 * 7 * 3 * 4) + 2) + (9 + 9) * (7 * (5 + 6 * 2 + 7) + (5 * 2 + 3 + 7))
2 * 8 + 2 + (3 + 4 * 4 * 8) + (8 * 5 * 7 + (8 * 6 + 8 * 6))
((5 + 4 + 5) * 2) + 6 * 3 + (4 * 2)
(9 * 4 * (7 + 2 + 5 * 6)) + 4 * 7 * 7 * 2
((4 + 9) + 6) * 5
(4 * 2) * ((3 * 5 * 5 * 3 * 9 + 5) * (5 * 2 * 5)) + 2 + 2 * 5
(4 + (4 * 2 + 7 * 2 + 6 * 8) * 8 + 2 * 8 + 3) + 3 * 7 * 3 + 8
2 + (6 * 5 + (8 + 4 + 9 * 7)) + 5
((7 + 5 + 8 * 4) + 2) + 3 + (9 * (7 + 8 * 3 * 8 + 2 * 7) + 5 + 7) + 2
4 + 7 * (3 * 4 + 6 + (6 * 7 + 7 + 4 * 5 + 4) + 2 * (6 + 3 + 8 + 9)) * 8 + 5
7 + 4 + 8
8 * 8 * (8 * 6 * (2 + 8 * 9 + 7) + 6 * 4) + 3
(4 + (9 * 8 + 5 + 9 * 2 * 6)) * 4
9 + 5 + 2
8 + 2 * 6 + (3 + 4 + 8)
2 * 5 + ((6 * 3 * 4 + 4 * 8) + 9 + 4 + 2) * (9 + 2) + 3
4 * 8 * 6 + 4 + 9
8 + 9 * (7 + 9 + 2 + (7 * 3 + 5) + 6 + 4) * 4 * 5
6 * ((7 + 6 + 3) * 8 + 5 + (3 * 7 + 8 * 5 + 6 + 9))
6 * 9 * 4 + 7 + 4
7 * 2 * 7 * 9
8 * 5 + (8 + 9 + 9 + 3 * 7) * 4 + (9 + 2 * (2 + 8 * 3 + 4 * 2 + 8) * 8 + 8 + (7 + 3 + 9)) * 8
8 + 7 * ((4 * 9) * 6) + 6
(4 * 7 + 2) + 7 * ((2 + 5 * 9 + 5 * 9 * 8) + 8)
(9 * 4 + 4 * 6 * 6 + 9) + (8 + 3 + 3) * 6 * 8 + 3
(9 + (4 + 9 + 7 * 9 * 7 * 7)) * 2 * ((5 + 9 * 3) * 2 * 3) + 2
(2 + (7 * 8 + 9) * 7) + 4 * 2 + 6
(7 * (6 * 5 + 8 * 8 + 4) * (6 * 4 * 3)) + (9 + 7 + 2 + 4 * 9) * (2 + 8 * 4 + 3) + 7 * 5 + 6
(4 + 3) + 8 + 2 * 4
(8 + 3) + 5 + 6 + (6 + 4) + 7
6 * 7 + 2 + ((6 + 7 * 5 + 6 * 4) + 4 + 8 * 5 * 8 * 9) + (7 * 6)
(4 + 9 + 5 + 5) + 7 + ((9 + 9) + 5 * 6 + (9 * 4 + 6) * (4 * 7 * 6 + 2)) + (6 + (2 + 7 + 6 * 7 + 4 * 6))
4 + 4
(8 + 8 + (5 * 2 + 4) * 5 * 2) * (3 * 4 * 6 + 3 + 4 * 9) * (8 * 6 + 5 + 9 + (9 + 4 * 3 * 5) + 4)
4 * (8 + (3 + 5)) + 2 * 5 * 4
7 + 5 * 2 * 3 + 6 * 8
2 + ((9 + 9 + 2 * 6) + 4 + 2 * 8)
2 + ((5 * 4 * 7) * 9 * 5 + 4 + 7 * 5) * 6
2 * 4 + ((7 * 4 + 4) + 6 + (8 + 9 + 9 + 8)) + (3 + 3) * ((2 + 8) + (9 + 7) + 8 * 2) * 3
(2 * 6 + 4 * 5 + (3 + 7 * 9 + 2 + 2)) + 6 + (8 + 6 * 4 * 8 + 9) + (7 + 9)
(2 + (8 + 4)) + 5 * 3 + 6 * (7 + 3 + 7 * 4 * (6 * 7 * 2 * 9 * 6 + 9) + (6 * 4))
8 + 7 * 2 * 3
8 * (5 + 2 + 7 * (9 + 2 * 6 * 5 * 6) + 2) * 6 + 9 * 4 * 4
(2 + 4 + (8 * 8 + 7 + 8 + 4 + 7) * 2 + (4 * 7 * 7 * 8)) + 5 * 9
(4 + 7 * 2 * 9 * 6) + 9 + 7 + (6 * 3 + (8 + 7 + 2 * 8 * 4 * 3) + 4 * 8 * 2) + 5 * 6
(7 + 4 * 8) * 7 * 4 + (7 * 2 * 9 + 8) + 8 + 9
(7 * 3 * 3 * 2) * (2 + 8) * 5 + 3
9 + 3 * 2 + 3 + 8
(7 + 4 * 4) + 2
9 + (3 + 8 * 2 * 7) * 7
9 * (7 + 7 * (5 * 8 * 8 + 8) * 6 + 4) + 9 * 3 + (4 * 2) * (2 * 6 + 3 * 9 * (7 + 2 * 2 + 6 * 3))
7 + (5 + 5 + 2 * 3)
8 + (7 + (4 + 2 + 7 * 6) * 4 + 4) + (2 * 9 + 9 * 5) + 3 + 3 + 9
7 + 8 * 7 * 6 * (4 * 6 * (9 + 7 * 7 + 2)) * 2
(9 + 4) * 2 * 7
3 * (7 + 9 * 9) * 8 + 9 + 6 * 7
9 * (2 + 7 * (8 * 2 + 5 * 9) + 7) + 6 * 9 + 5
4 + 7 * (5 + 9 + 7 * 9 + (8 * 8 + 4 + 6 + 5) * 3)
3 + 5 * ((9 * 9 * 3 + 9) + 6 * 7 * 2)
(2 + 7 * 6 * 2) + 7
(5 * 9 + 7 * 9 * (5 + 4 + 6 * 3 * 5) * (8 + 8 + 6)) * 9 + (6 * 3 * 4 + 8 * 3)
4 + 4 + ((3 + 6 + 5 * 5) * (8 + 7 + 9) + 3 + 7 * 7) + (3 + 8 + (8 * 4 + 5 + 5 * 2) * 7 * 5)
6 * 7 + (5 + (9 * 7 + 6 * 4) * 8 * 6 * (5 * 7 + 6 + 4 + 9 * 5) + 4)
9 + 8 + (3 * 5) + 3 + (4 + 2)
8 * 9 * 6
(6 * 2 * (2 + 9 * 4 * 8 + 2 * 9) + (6 * 9)) * 8 * 6 + 4
(6 * 3) + (8 + 3 + 2 * 4 + 9)
3 * 4 + (4 + 8 + 2 + (6 * 7 + 5 * 8) + (9 * 7 + 3)) + 7 * 7
((6 * 5) + (6 + 3) * 7 * 9 + (7 + 3 + 6) + 7) * 5 * 4 + 7 * (2 + 2 * 8 * 5 * 5 * 6) + 7
(9 + 5) * (8 * 2 + 2) + 9 * 7 + 5 + 7
(2 * 8 + 2) + 8 * (2 * 5 * (8 + 8 * 8) + (8 + 6 * 4 + 4 + 4 + 2) * 3) + 9 * (7 * 8 + 5 + (8 * 7) + 8 + 8) + (7 + 5)
5 * (5 * 9 + 8 * 4) + 4 * (4 * 7 + 6 + 7 * 5 * 3)
8 * 8 * (8 * 8 * 6 * 9 + 5 + 6) * (4 + 6 + 5 * 7)
9 + 4 + 8 * 5 * (4 + 9 + 7 * (9 + 5))
4 + 9 + 6 * 4 + (9 * 3 * (8 * 6 * 5 * 5 * 7 + 5) + (6 + 7 + 7 * 4 + 8) + (4 + 5 + 8 * 5 + 7)) + (9 + 9)
4 * 4 + 8 + 8 * (7 * (8 + 5 * 4)) + 6
2 * 9 + (7 * 2 + 5 * 7 + 5) + 4
2 * 6 * 7 + (6 * 3 * 4 * (7 * 6 + 4) + 8)
(4 + 3 + (9 + 7 * 6 + 2 * 2 * 6) + 7) * 4 * (5 + 7 * 7) * ((3 * 6 + 4 + 4 + 3 + 2) * (4 * 5 + 4 * 9)) * (4 + 5 * (8 + 4) * 6 + 9 + 6)
(7 * 4 * (7 * 4 + 9 + 5) + 5) + (4 * (6 * 6 + 6 + 9) + (3 + 4 + 3 + 2 * 9 * 5)) + 8 + ((9 * 7 * 4 + 5 * 9 + 7) * 8 * (8 + 3 * 9 * 3) + 7 * 7 + 4) * (2 + (5 + 3 + 3 + 2 + 8) + 2 * 6 * (3 * 9)) + 2
(4 + 7 + 7 * 8 + 6 * (3 * 5)) * (5 + 9)
4 + 2 + (5 + 3 * (2 + 4 + 2 + 7 * 6)) * ((4 + 6 * 6 * 3) * 5 * 4 * 2 + 3 + 5)
(4 + (4 + 8 * 2) * 7) + 3 * 8 * 6 * (8 * 7 + 8 + 3 * 7)
6 * 9 + 3 + ((6 + 2 * 3 * 4 * 5 + 4) * 8 + 3 * (3 * 3 * 4 + 2 * 3)) + 9
((2 + 7 * 2 + 9 * 6) + 5 + 5) + (8 + 5 * 3 + 6) * (6 + (5 + 8 + 7 + 2 * 8) * 4 + 2 * 2) * 7 + 3 + 4
(4 + (7 * 2 * 5 * 8 + 6 + 2) * 2 * 8) * 9 * 5
5 + 8 + 3 * 4 * (2 + 5 * 5 + 6 + 5) + 4
7 * 9 + (6 * 2 * 7 * 2 + 5) + 6 + 2
5 + (9 + 2 * (5 * 5 * 2 * 2) * 2 + (2 * 6 + 8)) * 9 * 4
4 + 4
8 * 2 * (5 + 2 * 9 + 7)
2 * 8
5 * (5 + 6 + (3 + 6 * 5) * 8) * 2 + 4 + 9
9 * 2 * (2 * 6 * 9 * 6 * 5 + 3) * 6 * (9 + 3 + 2) * (9 + 5 + 6 + 7 * 7)
4 + 6 * 3 * 6
7 * 7 * 6 * 7 + (6 + 7 + (9 + 6 * 9) * 3 * 3) + 7
2 * (9 + 9) * 6 + 3 * (9 * 9 * 7 + 2 + 6 + 4) + 3
4 * (4 * 9 + (5 * 5 + 3 + 6 * 8) * 2) + 3 * 6
6 + (8 + 3 + (2 + 4 * 8)) * 7 + 6 * 5
(2 * 4) * 3 + 2 * (9 * 7 + 5 + 2)
3 * (5 + (3 * 4) * 6 * 2 * (3 + 6) + 4)
3 * 4 + 2 * 4 * (8 * 4) * 9
((8 * 7 + 7) * 9 * 8 + 4) + 9 * 8 * 2 + 2
3 * 2 * 6 + 4 + 6 * ((5 * 9 * 4 + 6) * 3)
(9 * 9 + 8 * 5) + 7 * 3 + (8 + 2) + (6 + 5 * 6)
4 * 2 * ((5 + 6 * 3 * 9 + 8 + 6) + 6 * (6 + 5 + 5 + 7 * 4 * 6) + 2 * 9 * 3)
8 * (4 + 7 * 3) * (4 + 6 + (2 * 2) * 6) + 6
(9 * 5 * (5 + 7 + 6 + 9 * 8 * 8) + 8 + 5) + 6 * (5 + 7) + 6 + 9
4 * ((2 * 9 + 6 * 4 + 6 * 8) * 9 * 8 * 7 * (3 * 5 * 2 + 5 * 5 + 5) * 7) + 2
7 * 8 + 6 + ((3 * 2 + 9) + 5 * 6 + (8 * 3 + 6 * 6) * (3 * 9 * 6 * 9 * 3))
3 * (7 + 2) + (4 + 4 * (3 + 2 * 2) * 3) + 9
3 * (6 + 8 + 4 + 5 * 7) * 7
3 * (5 + 2 * 6 * 9 + 4) + 3 * 5 + 5
(2 * (2 * 9 * 8 * 5) * (5 * 5) + 6 * 4 + 6) * 8 * 6 * 8 + 6 * 6
(5 * (7 + 3 + 2)) * 5 * 2
7 * 6 * 8 + 9 * 6 + (7 * (2 + 8 * 8 + 8) + 5 + 2)
2 + 6 + (5 + 5 + (7 + 6) + 5 + 4) * (7 * 2 + 3 * 9 * (5 * 8 + 5)) * 8
(6 * 5 * 5 * (2 * 8 * 4 + 2 + 8 * 8)) * 2 + 5
6 * 6 * 6 * 2 * (2 * 7 + 7 + (7 + 7 + 3 * 4 * 7) * 5) * 2
8 + (9 + 9 * (4 + 2) + 3 + 8) * 9 * 4
(7 + 9) * 3 + 2 * (2 * 8 * 6 + 7 + 8)
2 * 8 * 2 * (6 * (9 * 5) * 3 + 4)
((7 * 4 * 3 + 9 + 8 * 5) * (6 * 2 + 2) * (2 + 7 + 3) + 7 + (8 * 9) * 4) * 9 + 5 * 7 * (3 * (2 * 5 + 5 * 9 + 7 + 3))
5 + (7 * 4 + (7 + 3 + 5 * 5) * 7 * 2 * 4) + 5 + 5 + 5 * 6
2 + 6 * (2 * 7 + 4 * 2 + 8) + 7 * (9 * 6 + 5 * 9 * (8 * 8 * 5 * 7 + 3 + 2)) + 2
3 + 6 + 8 + (6 * 9 * (8 * 5 * 9 * 9 + 8 + 7) * (2 + 8 * 9)) + 2
4 * 5 * 7 + 9 + 2 + (6 * 2)
8 + 5 + (2 * 8 * 7 * 2 * 9 + 5) * 6 * 4 + 5
(4 + 9 * 4 * 8 + 7 + 8) + 9 * (5 * 2 + 8) * 9 + (7 * 7 * (6 + 7 + 5))
6 + (9 + (2 * 8 + 5) + 7 * 9) * 2
4 + (9 + 9 * 5 + 6 + 6 + 8)
(9 * 7) * 5 + 3 * 4 + (4 * 7 * 6 * 6) * 2
8 * (3 * 6) * (5 * (6 * 3 + 2) + 7 + 9 * 5 * (2 * 8)) + 6 * 3 * (4 + 5)
9 + (2 + 5 * 2 + 7 + 8 * 3) + 8 + ((5 + 7 + 4 * 8) + 5) * 6
(2 + 9 * 5) * (7 + 7 + 3 + (3 + 9 * 4) + 5)
5 * 7 * ((4 * 8) + 6 + 3 * 3 * 7 * 6) * 2 + 3
6 + 8 + 8 * 2 * (5 + 5 + 3 + (2 * 2 * 8) * 6) * 9
4 * 8 * (5 + 8 + 7 + 2 * 2 * 8) * 6 + (8 + 3) * 2
(8 + 9) * (6 + 2) * 5 + (3 * 8 * 2) + (7 + (4 + 3 * 6 + 3 + 8) + 2)
2 * ((4 + 9) + 4 * (3 * 5 + 6 * 3 + 6 + 4) + 7 + 2 * 7) * 3 * 9 * (8 * 3 + 5 * 3) * 7
((2 * 5 + 5 + 3 * 9) + 9 + 4) * 7 + 8 * 2 * 3
2 + 5 * (5 + 5 * 9 + 2 * (4 + 2) * 4) + 4 + 2
4 * 8 + (9 * 4 * 5 + 7) + 8 + (8 * 3 * 6 * 7 * 6)
8 + (8 * 2 + 3 + 5) + 3 * 4 + 8
8 + (2 + 9 + 9 * 9 + 3 + (8 + 6 + 4 + 6 + 9 * 9)) * 9 * 5 * (6 + 5 * 7 * (2 * 9) * (4 * 3 + 5)) + (7 * 2)
(3 * 7 + 5 * (9 + 6 + 5) * 5) + 7 + 8
9 + 7 + (7 * (9 + 7 + 8 * 5 + 9 * 6) + 9) + (3 + 9 + (9 + 6 + 9 + 7 * 7 * 6)) * 7 + (4 * 5 * (5 + 9 + 2))
7 + 9 + (7 * (7 + 8 + 7 + 8 * 4 * 8) + 7 + 3 + 5 * 8) * (5 + 6) + (6 * 6) * 7
2 * 8 + (9 + (2 + 6 + 7 * 7)) * 3 + 7 + (4 * 4)
(7 + 2 + 5 * (8 + 6 + 9 * 2 * 6)) * 9 * 3
6 * 9 + 4 + ((5 + 8 + 4 + 8 * 5 * 7) * 2) * 2
9 + 5 * 3 + 2 * 7 * 5
8 * 4 * ((8 * 8 + 7 + 9 + 3 + 6) + 3 + 6 + (2 + 8 * 9 + 6)) + 9 * 5 * 7
6 + 8 * 3 + (6 * 4 * (8 * 3 + 8) + 3 * 7 * (9 * 6 * 7 * 8)) + 2 * 9
6 * 3 * 5 * 3 * 5 + 6
5 + (6 * 9 * 9 * 3 + 5 * 6) + 6 * 3
((6 * 5 + 7) + 4 + 9 + (6 + 9 * 6 * 5 * 7 * 5) * 6) + ((8 * 5 * 3) + 5 * 9 + (7 * 5 + 5 * 6)) * (9 * 7 * 8) * 4
8 * ((7 + 5 + 5 * 8) * (2 * 6))
((9 + 4 + 6 + 7 * 4 + 3) * 2 * (6 * 8) + 8) + 5
3 + 2 + 8 * ((3 + 9 + 7) + 9 * 9 * (3 * 2 * 7 + 9))
8 + (5 + 2 + 3 + 4) * 4 + (8 + 6 + 9 * 4)
6 * 9 * ((3 + 7 + 8 + 7 + 6 + 9) + 3 * 5)
7 + 4 * 8 * (5 * 8 + 7) * 8 + 5
3 + 7 * 6 * 7 + (4 + 3 * 3 + 6 + 6 + 9) + 4
4 * 4 + (8 * 7 + (8 + 5 * 8 + 4) + 8 * 4 * (3 * 7 * 3))
(5 * 9 + 3 + 2) + 4 + 7
(3 * 2 + 2) + (8 * 2 * 4 + 8)
(7 * 3 * (5 + 9) * 8) * ((8 * 3 * 3 + 6 + 4) * (7 * 8 * 7 + 9 * 5)) * (7 * (6 * 8 * 5 * 5 + 6 + 5))
(6 + 5 + 8 + 8 + 2) * 7
6 * 6 + (7 * 5 * 7 * 2 + 7 + (6 + 7 * 7 + 5 + 5)) + 6 * 2 * 9
(4 + 5 * 9 + 2 * 8) * (7 * 9) * ((5 + 7 + 6 * 6 * 8 + 3) * (2 + 2 + 8) * 9) * 4 + 8 + 8
(3 * 6 + 4 * (6 + 2 * 9 + 6 * 2 + 8) + (3 * 7 + 8 * 4 + 2)) + 9 + 7 * (5 + 4) + 2 * ((6 + 4 + 8 * 5 * 6 + 2) * 2 + 9 + (3 * 7) + 9)
6 + 7 + 2 * 7 + (6 + 4 * 5) * 5
4 * (9 * 6 + 2)
5 * 3 + (8 * (4 + 5 + 5 * 9) + 2)
3 * 3 + ((4 * 5 * 4) * 9 + 2 * (8 + 7 * 6 * 5 * 8)) + 3 + 5
3 + ((2 * 5 + 8) + (2 * 6 * 5 + 9 + 7 + 8) + 7 * (9 * 9 * 4) * 8 + 6)
(7 + 4 + (9 + 5 + 7 + 6 * 9) + 4 * (6 * 7 * 7) + 2) * 3 + 3 * 6
(4 + 2 + 3 * (2 * 6 * 6 * 9)) * ((7 + 6 * 8) + 6 * 2 + (9 + 2) * (2 + 3))
2 * (6 * (7 + 5 * 8 * 4) * (9 * 8 + 8) * (9 + 6) + 9 + 2)
9 * (8 + (5 + 2)) * 7
8 + (4 * 4 + 9 * 8 + (6 + 7 * 5 + 5) + 2) * 6
(9 * (6 * 2 * 8 * 9) * 4 * 7 + 2 * 9) + 2 * 3
2 * 5 * 4 + 4 + 6 + 6
7 + 8
((5 + 4 * 2 + 7) * 2 * (2 + 4)) * (3 * 8 * 3 * 3 + 6 + 6) + 6 + 3 * 7
4 * (3 + (4 * 6 + 9 * 3) + 7 * 9 + (9 * 4 * 4))
(7 + 4 + 4 * 4) * 8 * (9 + 5) + (4 * 5 * 8) * 7
(3 + 2 * (4 + 7 + 8 * 2 + 5)) * 7 + 6 * 7 + 8
9 * 8 * (8 * 8) + 9 + 6
4 + 5 + 9 + (3 + 9 * 9 + 5 * 8 + 4)
3 + 6 + 5 + 2 * 4 * (6 * 2 + (2 + 4 + 3 + 5 + 2) + 7)
8 * 8 * 5 * ((6 * 7) + 2 * 7 + 2 + 2 + 7) * 6
2 * 8 + (7 * 4 + (5 * 7 + 6 * 2 * 4) * 8) * 7 + 3 * 7
(3 * 6 + (4 + 7)) + 8
5 * 4 * (5 * 6 * (6 + 8 + 6 + 7 * 8 + 3) * 3 + 8 * 3) + (2 * (2 + 4 + 2 * 3 + 9 * 5) + 3 * (5 + 6 * 2 * 2 + 3) + 6) * (2 * 2) + 6
5 * (7 * 5 * 2 + 7 + (8 * 3 * 6 * 8 * 8 * 2) + 2) + 4 + 6
7 + 5 * 6 + (4 * 5)
(8 * 4) * ((3 + 2 * 3 + 9 + 6 + 4) + (9 * 4) + 6 + 4) * 9
6 * 5 * (2 + (6 * 7) * 8 + 7) + (2 * (4 * 5 * 5 * 6 + 5) * 2 * 3 + (9 * 2 + 3) + 6) * 6 * 5
(8 * (2 + 9) * 6 + 6 * 8 + 4) + 2 * 2 + 2
9 + (5 * 5 * (7 + 2 * 2 + 3 * 7) + 3 + 9) + 5 + 9 * 2
(7 + 2 + 5 * 5 + 5 * (7 * 9)) * 7 + 6 * 7 + (6 + 5 * (5 * 7) * 5 * (4 + 7 + 8 * 7) + 8) + 5
(8 + 2) + 2 * 6 * 7 + ((7 + 6 * 8 * 8 + 2) * 8)
(9 + 5) + 7 * 6 * 5 + 6
(5 + 2) + (4 + 8 + 8 * 5) * (6 * 2 * 3 * 4 * (7 + 3 + 7 * 3 + 5) + 7) * 2
4 * 5 * 6 + 8 * (9 * 3)
3 + (2 + 2 * 7 * 7) * 2 * 4 + (4 * 9 + 3 * (6 + 6)) + 3
(2 + 2 + 4 + (2 * 3 + 6 + 9 * 3 + 4) * 4 * 7) + 5
5 * (2 + 2 * 5 * 2 * 7) * ((8 + 5 * 4 + 2 + 7 * 4) + 2 * 7 * 9 * 9) + (8 + 2) * (7 + 7 * 9)
4 * 3 * 7 * (7 + 2 * 3 * 3 + 9)
9 * 5 * 7 + (3 * (5 + 2 + 3) * (9 + 2 * 5 + 9 * 4 + 2) * (9 * 4 + 8))
(8 + (9 * 6 + 3 * 3) + 7 + (9 + 4 * 6 * 8) * 7 + (8 * 9 * 9 * 8)) * 9 * 2 + 2 + (5 * 5) * 4
9 + 3 + 9 + 9
(5 * 5 * 3) + 3 + (7 + 3 + 9 + 8 + 9) * 8 + 4
4 * 7 * 2
6 * 5 + 2 + (8 * (8 * 7 * 7 * 4 + 7)) * 9 * 2
((2 * 6 * 8) + (2 * 5) + 2 * (3 + 6 * 6)) * 6
9 + 7 * ((2 + 6 * 3 + 4 * 3 + 2) * (8 * 5 + 5) * 7 * 7 * 9) + 2 * 7 * 2
7 * ((3 + 2 + 2 * 2) * (3 * 6 + 4) + 9 * 4 * 7) * 2
6 * 6 + 8 + (4 * 3 * 3 + 3)
(9 * 6 + 8 + 7 + 5 + 3) * 2
6 + 6 * (3 * (8 + 8 + 2 + 9)) + (2 + (2 * 4 + 8 * 9 * 7 + 4) * (8 + 4 + 5))
9 + 2 * (9 + 5)
6 + (6 + (2 + 6 * 7) * 9 + 4)
9 * ((2 * 9 * 2 + 2) + 9 * 7)
9 * 3 * (8 + 4) * 8 * 8 + (3 + (6 + 2 * 9 * 4 * 6) * 7)
3 + 7 + 5 + 7 * (9 + 3 * (8 * 9 + 6 + 7 + 9 * 8) * 9)
5 * 6 * (4 * 5 * 4 + 6) + 6 + 6 + 2
8 * 2 + (6 + 9 * 3 + 9) + 7 + 9
3 + 2 + (2 + 9) + 7
(6 + 3 * 3 * 8 * 5) + (5 * (7 * 7 + 8) + 8 + 6 + (4 + 3 + 5 * 5) * 8) + 5 + (6 * 4) * 8 * 2
5 + 5 * 6 + 7 * (5 * (4 + 9 * 4 + 7 + 2 * 8) * 2 * 8 * 7) + 3
(7 + (9 + 5 + 9 * 4 * 5 * 6) + 8) * 3 * ((7 * 8 + 8) * 5 + 8 * (2 * 6 + 9) * 5 + 7) * 4
((5 + 6 + 5 + 3 + 6) * 6) + (8 * (8 * 2 + 3 + 9 + 3) * 7 * 7 * 2) * 7 * 3
4 * (9 + 8 * 8 + 6 + 3) + 8 + ((7 * 3 + 2 * 2 + 7) + 2 * 2) * 4
(7 + 7 * 5 + 5 + 4) + 8 + 6 * (6 * (9 + 8 + 8) + 8) + 4 + 2
(6 + 9 * 3 * (9 * 8 + 3) * (9 * 9 * 2)) * 8
4 + ((4 + 3 + 4 * 9 + 8) * 5 * 4 * 5 + 7 * 2) + (3 + 3 + (6 * 4) * 5 * 4 + 4) * 4 * ((6 * 6) + 5 + 4)").Returns(323912478287549);
        }
    }
}